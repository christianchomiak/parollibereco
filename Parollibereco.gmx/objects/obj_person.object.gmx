<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_person_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MaxNumbersOfSecondsToLive = random_range(2, 7);
NumberOfSecondsLived = 0;

isInsulting = false;
isCensored = false;
isRallying = false;

MaxNumberOfSecondsInsulted = random_range(3, 10);
MaxNumbersOfSecondsCensored = random_range(5, 10);
MaxNumbersOfSecondsRallying = random_range(3, 10);

NumberOfSecondsInsulted = 0;
NumbersOfSecondsCensored = 0;
NumbersOfSecondsRallying = 0;


//var avatar;
avatar = instance_create(x + (global.manager.person_width / 2), y + (global.manager.person_height), obj_avatar);
avatar.depth = 0;
avatar.image_speed = 0;
avatar.image_xscale = global.manager.avatar_height / sprite_get_height(spr_avatarTest2);
avatar.image_yscale = global.manager.avatar_height / sprite_get_height(spr_avatarTest2);

//var bubble;
bubble = instance_create(x + (global.manager.person_width / 2), y + (global.manager.person_height * 0.25), obj_bubble);
bubble.depth = 1;
bubble.image_speed = 0;
bubble.image_xscale = global.manager.bubble_height / sprite_get_height(spr_Bubble2); // 0.9;
bubble.image_yscale = global.manager.bubble_height / sprite_get_height(spr_Bubble2); // 1.1;

//var speech;
speech = instance_create(bubble.x, y + (global.manager.person_height * 0.19) , obj_speech);
speech.depth = 0;
speech.image_speed = 0;
speech.image_index = 0;
speech.image_xscale = global.manager.speech_height / sprite_get_height(spr_speech); //0.8;
speech.image_yscale = global.manager.speech_height / sprite_get_height(spr_speech); //0.8;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isInsulting
{
    NumberOfSecondsInsulted += scr_DeltaTime();
    
    if NumberOfSecondsInsulted &gt;= MaxNumberOfSecondsInsulted
    {
        //NumberOfSecondsInsulted = 0;
        scr_reset_person(self.id, false);
    }
}
else if isCensored
{
    NumbersOfSecondsCensored += scr_DeltaTime();
    
    if NumbersOfSecondsCensored &gt;= MaxNumbersOfSecondsCensored
    {
        //NumberOfSecondsInsulted = 0;
        scr_reset_person(self.id, false);
        
        if scr_count_censored_people() == 0
        {            
            audio_stop_sound(sfx_Angry);
        
            global.manager.SFX = audio_play_sound(sfx_Normal, 0.5, true);
            audio_sound_gain(global.manager.SFX, 0.075, 0);
        }
    }
}
else if isRallying
{
    NumbersOfSecondsRallying += scr_DeltaTime();
    
    if NumbersOfSecondsRallying &gt;= MaxNumbersOfSecondsRallying
    {
        //NumberOfSecondsInsulted = 0;
        scr_reset_person(self.id, false);
    }
}
else
{
    NumberOfSecondsLived += scr_DeltaTime();
    
    if NumberOfSecondsLived &gt;= MaxNumbersOfSecondsToLive
    {
        //NumberOfSecondsInsulted = 0;
        scr_reset_person(self.id, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//We can censor the person anytime, unless it is already censored
if (!isCensored)
{
    //The person is censored and others reply as they see fit
    scr_execute_censorship(id, speech.image_index); //, global.manager.can_people_insult_during_rally);
    show_message("RIGHT: " + string(name));
}
else
{
    //The person is already censored. Do nothing.
    show_message("RIGHT: " + string(name) + " already censored");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// We can insult the person anytime, unless it is already insulting or censored
if (!isInsulting &amp;&amp; !isCensored)
{
    //The person responds to our insults
    scr_execute_insult(self.id);
    show_message("LEFT: " + string(name));
}
else if (isInsulting)
{
    //The person is already insulting. Do nothing.

    show_message("LEFT: " + string(name) + " already insulting");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
