<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Window setup

window_set_fullscreen(false);


//How big is the screen?
screen_width = 1024; //display_get_width();
screen_height = 768; //display_get_height();

//Set size of window - not useful when on fullscreen
window_set_size(screen_width, screen_height);

//How much of the room do we want on-screen
view_wview = room_width;
view_hview = room_height;

//How much of the screen do we want to take on?
view_wport = screen_width;  
view_hport = screen_height;

surface_resize(application_surface, screen_width, screen_height);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game setup
global.manager = id;


var BGM = audio_play_sound(bgm_air, 1, true);
audio_sound_gain(BGM, 0.15, 0);

SFX = audio_play_sound(sfx_ambience, 0.5, true);
audio_sound_gain(SFX, 0.15, 0);

cursor = instance_create(mouse_x, mouse_y, obj_cursor);
cursor.image_xscale = 1.5;
cursor.image_yscale = cursor.image_xscale;
cursor.depth = -5;


rows = 2;
columns = 5;

startingX = 0;
startingY = 0.05 * room_height;

table_width = 1 * room_width;
table_height = 0.95 * room_height;


person_width = table_width / columns;
person_height = table_height / rows;

avatar_height = 0.5 * person_height;
bubble_height = 0.45 * person_height;
speech_height = 0.35 * person_height;
negate_height = 0.375 * person_height;

person_depth = 0;

insulted_speech = 0;
censored_speech = 1;
rebellion_speech = 2;
default_speech = 3;

max_number_of_censorships = (rows * columns) * 0.5;


for (var r = 0; r &lt; rows; r++)
{
    for (var c = 0; c &lt; columns; c++)
    {
        people[r, c] = scr_create_person(startingX, startingY, person_width, person_height, person_depth, c, r);
        
        var person_name = "P(" + string(c) + ", " + string(r) + ")";
        scr_set_person_name(people[r, c], person_name);
        
        /*var person_name = "P(" + string(c) + ", " + string(r) + ")";
        var person_color = scr_get_random_person_color();
        var person_speech = scr_get_random_person_speech();
        
        scr_set_person_info(people[r, c], person_name, person_color, person_speech);*/
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var numberOfCensoredPeople = scr_count_censored_people();

if numberOfCensoredPeople == 0 &amp;&amp; scr_check_if_rebelling_people() == false
{
    if audio_is_playing(sfx_angry)
    {    
        audio_stop_sound(sfx_angry);    
        //SFX = audio_play_sound(sfx_Normal, 0.5, true);
        //audio_sound_gain(SFX, 0.075, 0);
    }
}
else if numberOfCensoredPeople &gt;= max_number_of_censorships
{
    scr_execute_rebellion();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_draw_esc();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_space)
{
    for (var r = 0; r &lt; rows; r++)
    {
        for (var c = 0; c &lt; columns; c++)
        {
            //var person_name = "P(" + string(r) + ", " + string(c) + ")";
            //var person_speech = scr_get_random_person_speech();
            
            //scr_set_person_info(people[r, c], person_name, person_color, person_speech);
            //scr_set_person_color(people[r, c], person_color);
            
            scr_reset_person(people[r, c], true);
        }
    }
}
else if keyboard_check_pressed(vk_escape)
{
    if false
        game_end();
    else
    {
        audio_stop_all();
        room_goto(0);
    }
}
/*else if keyboard_check_pressed(ord('R'))
{
    game_restart();
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
